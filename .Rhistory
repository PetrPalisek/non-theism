df$CR3 <- ifelse(df$CR3_1 == 0, 0,  df$CR3_2)
df$CR4 <- ifelse(df$CR4_1 == 0, 0,  df$CR4_2)
df$MS1 <- as.numeric(df$MS1)
df$ParRit <- ifelse(df$ParRit == 777, NA, df$ParRit)
df$BiG1 <- factor(df$BiG1, levels = c("0", ".5", "1"))
df$BiG2 <- factor(df$BiG2, levels = c("0", ".5", "1"))
df$BiG3 <- factor(df$BiG3, levels = c("0", ".5", "1"))
df$BiG4 <- factor(df$BiG4, levels = c("0", ".5", "1"))
df$T2 <- factor(df$T2)
df$H2 <- factor(df$H2)
df$H3 <- factor(df$H3 )
df$H4 <- factor(df$H4 )
df$PR2 <- factor(df$PR2)
df$PR3 <- factor(df$PR3)
df$PR4 <- 8-df$PR4 # Revert PR at T4
df$PR4 <- factor(df$PR4)
df$CR2 <- factor(df$CR2)
df$CR3 <- factor(df$CR3)
df$CR4 <- factor(df$CR4)
df$ParRit <- factor(df$ParRit )
df$PST <- factor(df$PST )
df$Age <- as.vector(scale(ifelse(df$Age == 888, NA, df$Age)))
df$Inc3 <-  as.vector(scale(df$Inc3))
str(df)
# Descriptives ------------------------------------------------------------
Amelia::missmap(df, rank.order = F)
na_sum <- data.frame(lapply(df, function(x) sum(is.na(x))))
na_sum[2,] <- round(na_sum[1,]/nrow(df)*100,2)
na_sum <- t(na_sum) # % missing per var
# missing in BiG
Amelia::missmap(df[,c("BiG1", "BiG2", "BiG3", "BiG4")], rank.order = F)
df$god_na_sum <- rowSums(is.na(df[,c("BiG1", "BiG2", "BiG3", "BiG4")]))
table(df$god_na_sum)
psych::describe(df[,c("BiG1", "BiG2", "BiG3", "BiG4")])
df$focal_na <- rowSums(is.na(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")]))
sum(df$focal_na > 0)
Amelia::missmap(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")], rank.order = F)
psych::describe(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")])
table(df$focal_na)
# Plots -------------------------------------------------------------------
library(ggalluvial)
long_df <- df %>%
pivot_longer(cols = starts_with("BiG"), names_to = "TimePoint", values_to = "Belief") %>%
mutate(TimePoint = as.integer(gsub("BiG", "", TimePoint)),
Belief = ifelse(is.na(Belief), "NA", as.character(Belief)),
Belief = factor(Belief, ordered = TRUE, levels = c("NA", "0", ".5", "1")))
# Plot the data using stacked bar plot
ggplot(long_df, aes(x = TimePoint, fill = Belief)) +
geom_bar(position = "stack", width = 0.7) +
labs(title = "Changes in Belief in God over Time",
x = "Time Point",
y = "Count",
fill = "Belief") +
theme_minimal()
# Imputation --------------------------------------------------------------
# Number of imputed df
N.Imp <-  50
# Create a column that contain the appropreate model for each variable - this only works if the variable is of the correct data type in the first place
names(df)
type <- c("", "", "", "", "","pmm", "polr",
"", "", "", "polr", "polr", "", "",
"", "", "polr", "polr", "", "", "polr",
"polr", "polr", "polr", "", "", "polr", "pmm",
"polr", "polr", "", "", "polr", "pmm", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "polr", "polr", "polr", "",
"")
df_imp <- mice::mice(df, m = N.Imp, method = type)
# Exract each DF
mice.imp <- list()
for(i in 1:N.Imp) {
mice.imp[[i]] <- mice::complete(df_imp, action= i, inc=FALSE)
# remove spaces and other charecters on colnames
colnames( mice.imp[[i]]) <- gsub(" ", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("/", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("-", "_", colnames( mice.imp[[i]]), fixed = TRUE)
}
#M: I am thinking about plotting the overall trends in beliefs across waves, can explain in person
# a plot that would be nicely descriptive and would give a lot of information about the demographics and missingess
base <- "
BiG2 ~ BiG1 + h1a*MS1
BiG3 ~ ar3*BiG2 + h1b*MS1
BiG4 ~ ar4*BiG3 + h1c*MS1
BiG2 ~*~ 1*BiG2
## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c
"
base_mi <- semTools::runMI(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
### Controls model
controls <- "
BiG1 ~ Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE + OtherE
BiG2 ~ Male + BlackProt + Catholic + MainProt   + BlackE + LatinxE + OtherE
BiG3 ~ Male + BlackProt + Catholic + MainProt + BlackE + LatinxE + OtherE
BiG4 ~ Age + Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE  + OtherE +
Inc3 + ParRit + College + HighSchool + PST
BiG2 ~ BiG1 + h1a*MS1
BiG3 ~ ar3*BiG2 + h1b*MS1
BiG4 ~ ar4*BiG3 + h1c*MS1
eta_BiG =~ BiG1 + 1*BiG2 + 1*BiG3 + 1*BiG4
# Misc
MS1 ~ ParCollege + ParHighSchool + BlackE + LatinxE + OtherE
BlackProt ~ BlackE
Catholic ~ LatinxE
BlackProt + MainProt + Catholic ~ OtherE
College + HighSchool ~ ParCollege + ParHighSchool + Age + MS1
Inc3 ~ MS1
ParRit ~ ParCollege + ParHighSchool
## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c
"
controls_mi <- semTools::runMI(controls, mice.imp, fun = "sem",
ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
summary(controls_mi)
fit_controls <- lavaan::sem(controls, data.frame(mice.imp[1]), ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(standardizedSolution(fit_controls)[, 'label'] == param)
}
est <- standardizedSolution(fit_controls)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit_controls, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
summary(fit_controls)
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
hist(base_goricas$gorica_result)
controls_goricas <- gorica_pool_lavaan_definedparams(mice.imp, controls,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
hist(base_goricas/(1-base_goricas))
hist(controls_goricas/(1-controls_goricas))
hist(base_goricas/(1-base_goricas))
hist(controls_goricas/(1-controls_goricas))
mean(controls_goricas)
mean(controls_goricas/(1-controls_goricas))
sd(controls_goricas/(1-controls_goricas))
iqre(controls_goricas/(1-controls_goricas))
iqr(controls_goricas/(1-controls_goricas))
mean(base_goricas/(1-base_goricas))
sd(base_goricas/(1-base_goricas))
median(controls_goricas/(1-controls_goricas))
full_linear <- "
BiG1 ~ Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE + OtherE
BiG2 ~ Male + BlackProt + Catholic + MainProt   + BlackE + LatinxE + OtherE
BiG3 ~ Male + BlackProt + Catholic + MainProt + BlackE + LatinxE + OtherE
BiG4 ~ Age + Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE  + OtherE +
Inc3 + ParRit + College + HighSchool + PST
BiG2 ~ BiG1 + h1a*MS1
BiG3 ~ ar3*BiG2 + h1b*MS1+ PR2 + CR2 + h2.1a*H2 + h2.2a*T2
BiG4 ~ ar4*BiG3 + h1c*MS1 + h2.1b*H2 + h2.2b*T2 + h3.1b*PR3 + h3.2b*CR3 + h2.1d*H3
eta_BiG =~ BiG1 + 1*BiG2 + 1*BiG3 + 1*BiG4
# Misc
MS1 ~ ParCollege + ParHighSchool + BlackE + LatinxE + OtherE
BlackProt ~ BlackE
Catholic ~ LatinxE
BlackProt + MainProt + Catholic ~ OtherE
College + HighSchool ~ ParCollege + ParHighSchool + Age + MS1
Inc3 ~ MS1
ParRit ~ ParCollege + ParHighSchool
# PR
PR2 ~ MS1
PR3 ~  PR2 + MS1 + h3.1a*H2 + T2
PR4 ~ PR3 + MS1
# CR
CR2 ~ MS1
CR3 ~ CR2 + MS1 + H2 + h3.2a*T2
CR4 ~ CR3 + MS1
# H
H2 ~ ms1_h2*MS1
H3 ~ arH*H2
H4 ~ H3
# T
T2 ~ MS1
## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
## H2 -> BiG3 -> BiG4
h2_big4 := h2.1a*ar4
## T2 -> BiG3 -> BiG4
t2_big4 := h2.2a*ar4
## H2 -> H3 -> BiG4
h2_h3_big4 := arH*h2.1d
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c
## H2 -> PR3 -> BiG4
h3.1indirect := h3.1a*h3.1b
h3.1direct := h2.1b
## T2 -> CR3 -> BiG4
h3.2indirect := h3.2a*h3.2b
h3.2direct := h2.2b"
str(df)
df_ml <- df
df_ml[,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")] <- lapply(df[,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")], FUN = as.numeric)
full_fit_linear <- sem(full_linear, df, ordered =F, meanstructure = T, missing = "FIML", estimator = "MLR")
df_ml[,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")] <- lapply(df_ml[,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")], FUN = as.numeric)
full_fit_linear <- sem(full_linear, df, ordered =F, meanstructure = T, missing = "FIML", estimator = "MLR")
full_fit_linear <- sem(full_linear, df, meanstructure = T, missing = "FIML", estimator = "MLR")
full_fit_linear <- sem(full_linear, df_ml, meanstructure = T, missing = "FIML", estimator = "MLR")
View(mice.imp)
mice.imp[[1]]
str(mice.imp[[1]])
mice.imp_lin <- mice.imp
lapply(mice.imp_lin[,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")], FUN = as.numeric)
length(mice.imp_lin)
for(i in 1:length(mice.imp_lin)){
mice.imp_lin[i] <-  lapply(mice.imp_lin[i][,c("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")], FUN = as.numeric)
}
mice.imp_lin[1]
mice.imp_lin[1][,"BiG1"]
for(i in 1:length(mice.imp_lin)){
mice.imp_lin[i] <-  lapply(mice.imp_lin[i] %>% subset("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST"), FUN = as.numeric)
}
mice.imp_lin[1] %>% subset("BiG1", "BiG2", "BiG3", "BiG4", "ParRit", "PR2",
"PR3", "PR4", "CR2", "CR3", "CR4", "H2", "H3", "H4", "T2", "PST")
# Loop over each dataframe in the list
for (i in 1:length(mice.imp_lin)) {
# Convert specified columns to numeric
mice.imp_lin[[i]] <- mice.imp_lin[[i]] %>%
mutate_at(vars(BiG1, BiG2, BiG3, BiG4, ParRit, PR2, PR3, PR4, CR2, CR3, CR4, H2, H3, H4, T2, PST), as.numeric)
}
full_linear <- "
BiG1 ~ Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE + OtherE
BiG2 ~ Male + BlackProt + Catholic + MainProt   + BlackE + LatinxE + OtherE
BiG3 ~ Male + BlackProt + Catholic + MainProt + BlackE + LatinxE + OtherE
BiG4 ~ Age + Male + BlackProt + Catholic + MainProt  + BlackE + LatinxE  + OtherE +
Inc3 + ParRit + College + HighSchool + PST
BiG2 ~ BiG1 + h1a*MS1
BiG3 ~ ar3*BiG2 + h1b*MS1+ PR2 + CR2 + h2.1a*H2 + h2.2a*T2
BiG4 ~ ar4*BiG3 + h1c*MS1 + h2.1b*H2 + h2.2b*T2 + h3.1b*PR3 + h3.2b*CR3 + h2.1d*H3
eta_BiG =~ BiG1 + 1*BiG2 + 1*BiG3 + 1*BiG4
# Misc
MS1 ~ ParCollege + ParHighSchool + BlackE + LatinxE + OtherE
BlackProt ~ BlackE
Catholic ~ LatinxE
BlackProt + MainProt + Catholic ~ OtherE
College + HighSchool ~ ParCollege + ParHighSchool + Age + MS1
Inc3 ~ MS1
ParRit ~ ParCollege + ParHighSchool
# PR
PR2 ~ MS1
PR3 ~  PR2 + MS1 + h3.1a*H2 + T2
PR4 ~ PR3 + MS1
# CR
CR2 ~ MS1
CR3 ~ CR2 + MS1 + H2 + h3.2a*T2
CR4 ~ CR3 + MS1
# H
H2 ~ ms1_h2*MS1
H3 ~ arH*H2
H4 ~ H3
# T
T2 ~ MS1
## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
## H2 -> BiG3 -> BiG4
h2_big4 := h2.1a*ar4
## T2 -> BiG3 -> BiG4
t2_big4 := h2.2a*ar4
## H2 -> H3 -> BiG4
h2_h3_big4 := arH*h2.1d
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c
## H2 -> PR3 -> BiG4
h3.1indirect := h3.1a*h3.1b
h3.1direct := h2.1b
## T2 -> CR3 -> BiG4
h3.2indirect := h3.2a*h3.2b
h3.2direct := h2.2b"
linear_goricas <- gorica_pool_lavaan_definedparams(mice.imp_lin, full_linear,
"MLR", ordered = F,
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
full_fit_linear <- sem(full_linear, df_ml, meanstructure = T, missing = "FIML", estimator = "MLR")
summary(full_fit_linear, std = T, fit = T)
linear_goricas <- gorica_pool_lavaan_definedparams(mice.imp_lin, full_linear,
"MLR", ordered = F,
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
full_fit_linear <- sem(full_linear, df_ml, meanstructure = T, missing = "FIML", estimator = "MLR", parameterization = "theta")
linear_goricas <- gorica_pool_lavaan_definedparams(mice.imp_lin, full_linear,
"MLR", ordered = F,
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
linear_goricas <- gorica_pool_lavaan_definedparams(mice.imp_lin, full_linear,
"MLR", ordered = NULL,
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
controls_goricas <- gorica_pool_lavaan_definedparams(mice.imp, controls,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
warnings()
mice.imp_lin
str(mice.imp_lin)
View(x)
gorica_pool_lavaan_definedparams <- function(imputed_data_list, model.syntax, estimator, ordered, hypothesis, hypothesis_elements) {
library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]]
}
gorica_pool_lavaan_definedparams <- function(imputed_data_list, model.syntax, estimator, ordered, hypothesis, hypothesis_elements) {
library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]])
}
print(gorica_df)
return(gorica_df)
}
# Example:
# base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
#                                hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
#                                 hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas
gorica_pool_lavaan_definedparams <- function(imputed_data_list, model.syntax, estimator, ordered, hypothesis, hypothesis_elements) {
library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(gorica_df, restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]][1])
}
print(gorica_df)
return(gorica_df)
}
# Example:
# base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
#                                hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
#                                 hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
gorica_pool_lavaan_definedparams <- function(imputed_data_list, model.syntax, estimator, ordered, hypothesis, hypothesis_elements) {
library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(gorica_df, restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]][1,])
}
print(gorica_df)
return(gorica_df)
}
# Example:
# base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
#                                hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
#                                 hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
gorica_pool_lavaan_definedparams <- function(imputed_data_list, model.syntax, estimator, ordered, hypothesis, hypothesis_elements) {
library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(gorica_df, restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]][1,])
}
gorica_df$model <- 1:length(imputed_data_list)
print(gorica_df)
return(gorica_df)
}
# Example:
# base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
#                                hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
#                                 hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
controls_goricas <- gorica_pool_lavaan_definedparams(mice.imp, controls,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
remotes::install_github("TDJorgensen/lavaan.mi")
standardizedSolution.mi(controls_mi)
lavaan.mi::standardizedSolution.mi(controls_mi)
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(controls_mi)[, 'label'] == param)
}
indices
est <- lavaan.mi::standardizedSolution.mi(fit_controls)[indices, 'est.std'] # estimates
est <- lavaan.mi::standardizedSolution.mi(controls_mi)[indices, 'est.std'] # estimates
VCOV <- lavaan.mi::standardizedSolution.mi(controls_mi, return.vcov = T) # covariance matrix
lavaan.mi::standardizedSolution.mi(controls_mi, return.vcov = T)
names(est) <- hypothesis_elements
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
est
?standardizedSolution.mi
VCOV <- vcov(controls_mi, type = "pooled") # covariance matrix
VCOV
VCOV <- vcov(controls_mi, type = "user") # covariance matrix
?goric
