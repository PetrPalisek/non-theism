library(lavaan)
library(restriktor)
gorica_df <- data.frame() # Dataframe to store the results
# Loop over each imputed dataset
for (dataset in 1:length(imputed_data_list)) {
# Fit the specified SEM to each dataset
fit <- lavaan::sem(model = model.syntax, data = data.frame(imputed_data_list[[dataset]]),
estimator = estimator, ordered = ordered, parameterization = "theta",
meanstructure = T,  missing = "pairwise")
indices <- rep(NA, length(hypothesis_elements))
# Extract the parameters from hypothesis_elements
for (i in seq_along(hypothesis_elements)) {
indices[i] <- which(standardizedSolution(fit)[, 'label'] == hypothesis_elements[i])
}
est <- standardizedSolution(fit)[indices, 'est.std'] # estimates
VCOV <- lavInspect(fit, "vcov.def.std.all") # covariance matrix
names(est) <- hypothesis_elements
gorica_df <- rbind(gorica_df, restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")[["result"]][1,])
}
gorica_df$model <- 1:length(imputed_data_list)
print(gorica_df)
return(gorica_df)
}
# Example:
# base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base, "WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
#                                hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
#                                 hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
base_goricas <- gorica_pool_lavaan_definedparams(mice.imp, base,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
controls_goricas <- gorica_pool_lavaan_definedparams(mice.imp, controls,
"WLSMV", ordered = c("BiG1","BiG2", "BiG3", "BiG4", "ParRit", "PST"),
hypothesis = "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0",
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4"))
remotes::install_github("TDJorgensen/lavaan.mi")
standardizedSolution.mi(controls_mi)
lavaan.mi::standardizedSolution.mi(controls_mi)
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(controls_mi)[, 'label'] == param)
}
indices
est <- lavaan.mi::standardizedSolution.mi(fit_controls)[indices, 'est.std'] # estimates
est <- lavaan.mi::standardizedSolution.mi(controls_mi)[indices, 'est.std'] # estimates
VCOV <- lavaan.mi::standardizedSolution.mi(controls_mi, return.vcov = T) # covariance matrix
lavaan.mi::standardizedSolution.mi(controls_mi, return.vcov = T)
names(est) <- hypothesis_elements
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
est
?standardizedSolution.mi
VCOV <- vcov(controls_mi, type = "pooled") # covariance matrix
VCOV
VCOV <- vcov(controls_mi, type = "user") # covariance matrix
?goric
standardizedSolution.mi(base_mi)
library(lavaan.mi)
standardizedSolution.mi(base_mi)
base_mi <- semTools::runMI(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
library(lavaan)
library(semTools)
library(semPlot)
library(restriktor)
library(gorica)
library(qpcR)
library(readxl)
library(tidyverse)
library(fastDummies)
library(Amelia)
library(psych)
library(lavaan.mi)
source("https://raw.githubusercontent.com/PetrPalisek/gorica_helpers/main/gorica_pool_lavaan_definedparams.R")
set.seed(3333)
# Load data
w1 <- readxl::read_excel("nsyr1.xlsx")
w2 <- readxl::read_excel("nsyr2.xlsx")
w3 <- readxl::read_excel("nsyr3.xlsx")
w4 <- readxl::read_excel("nsyr4.xlsx")
# Selecting relevant vars
w1 <- w1 %>%
select(IDS, I_GENDER, PRACE, ETHRACE, AGECATS,
PINCOME, GOD, PEDUC1, PSPEDUC1, PEDUC3,
PATTEND, PSTRESS, RELTRAD, PSPEDUC3, BNPRLCAT, BNPRLPRT)
# Adding suffixes to distinguish waves
names(w1)[2:ncol(w1)] <- paste(names(w1)[2:ncol(w1)], "_W1", sep = "")
# Selecting relevant vars
w2 <- w2 %>%
select(IDS, GOD, HEALTH, ATTREG, ATTEND1,
PRAYALON, TRUST)
# Adding suffixes to distinguish waves
names(w2)[2:ncol(w2)] <- paste(names(w2)[2:ncol(w2)], "_W2", sep = "")
# Selecting relevant vars
w3 <- w3 %>%
select(IDS, GOD, HEALTH, ATTREG, ATTEND1,
PRAYALON, EARNINGS)
# Adding suffixes to distinguish waves
names(w3)[2:ncol(w3)] <- paste(names(w3)[2:ncol(w3)], "_W3", sep = "")
w4 <- w4 %>%
select(IDS, GOD_W4, HEALTH_W4, ATTREG_W4, ATTEND1_W4,
PRAYALON_W4, EARNINGS_W4, EDATT_W4)
# Merging
df <- merge(w1, w2, by = "IDS", all = T)
df <- merge(df, w3, by = "IDS", all = T)
df <- merge(df, w4, by = "IDS", all = T)
# Coding NAs
table(df$GOD_W4)
df$PRACE_W1 <- ifelse(df$PRACE_W1 == 888, NA, df$PRACE_W1)
df$ETHRACE_W1 <- ifelse(df$ETHRACE_W1 > 776, NA, df$ETHRACE_W1)
df$PINCOME_W1 <- ifelse(df$PINCOME_W1 > 776, NA, df$PINCOME_W1)
df$PEDUC1_W1 <- ifelse(df$PEDUC1_W1 > 4, NA, df$PEDUC1_W1)
df$PSPEDUC1_W1 <- ifelse(df$PSPEDUC1_W1 > 4, NA, df$PSPEDUC1_W1)
df$PEDUC3_W1 <- ifelse(df$PEDUC3_W1 > 12, NA, df$PEDUC3_W1)
df$PATTEND_W1 <- ifelse(df$PATTEND_W1 == 888, NA, df$PATTEND_W1)
df$PSTRESS_W1 <- ifelse(df$PSTRESS_W1 > 5, NA, df$PSTRESS_W1)
df$HEALTH_W2 <- ifelse(df$HEALTH_W2 == 666, NA, df$HEALTH_W2)
df$ATTREG_W2 <- ifelse(df$ATTREG_W2 == 666, NA, df$ATTREG_W2)
df$ATTEND1_W2 <- ifelse(df$ATTEND1_W2 > 7, NA, df$ATTEND1_W2)
df$ATTEND1_W3 <- ifelse(df$ATTEND1_W3 > 7, NA, df$ATTEND1_W3)
df$ATTEND1_W4 <- ifelse(df$ATTEND1_W4 == -99, NA, df$ATTEND1_W4)
df$PRAYALON_W2 <- ifelse(df$PRAYALON_W2 > 7, NA, df$PRAYALON_W2)
df$PRAYALON_W3 <- ifelse(df$PRAYALON_W3 > 7, NA, df$PRAYALON_W3)
df$TRUST_W2 <- ifelse(df$TRUST_W2 > 4, NA, df$TRUST_W2)
df$HEALTH_W3 <- ifelse(df$HEALTH_W3 == 999, NA, df$HEALTH_W3)
df$EARNINGS_W3 <- ifelse(df$EARNINGS_W3 > 27, NA, df$EARNINGS_W3)
df$EARNINGS_W4 <- ifelse(df$EARNINGS_W4 == 17, NA, df$EARNINGS_W4)
# Making sure all vars have the same scales over waves
# df$GOD_W1 yes / no / unsure ( 1, 2, 777)
# df$GOD_W2 yes / no / unsure ( 1, 2, 3)
# df$GOD_W3 yes / no / unsure ( 1, 2, 3)
# df$GOD_W4 no / yes / unsure ( 0, 1, 2)
# Check all NAs
table(df$GOD_W1)
table(df$GOD_W2)
table(df$GOD_W3)
table(df$GOD_W4)
df <- df %>%
mutate(GOD_W1 = case_when(
GOD_W1 == 1 ~ "1",
GOD_W1 == 2 ~ "0",
GOD_W1 == 777 ~ ".5",
.default = NA
)) %>%
mutate(GOD_W2 = case_when(
GOD_W2 == 1 ~ "1",
GOD_W2 == 2 ~ "0",
GOD_W2 == 3 ~ ".5",
.default = NA
)) %>%
mutate(GOD_W3 = case_when(
GOD_W3 == 1 ~ "1",
GOD_W3 == 2 ~ "0",
GOD_W3 == 3 ~ ".5",
.default = NA
)) %>%
mutate(GOD_W4 = case_when(
GOD_W4 == 1 ~ "1",
GOD_W4 == 0 ~ "0",
GOD_W4 == 2 ~ ".5",
.default = NA
)) %>%
mutate(TRUST_W2 = case_when(
TRUST_W2 == 2 ~ "0",
TRUST_W2 == 3 ~ "0.5",
TRUST_W2 == 1 ~ "1"
))
table(df$GOD_W1)
table(df$GOD_W2)
table(df$GOD_W3)
table(df$GOD_W4)
# Recoding factor variable values to characters
df <- df %>%
mutate(I_GENDER_W1 = case_when(
I_GENDER_W1 == 1 ~ "Female",
I_GENDER_W1 == 2 ~ "Male",
TRUE ~ as.character(I_GENDER_W1)  # Keep other values unchanged
)) %>%
mutate(PRACE_W1 = case_when(
PRACE_W1 == 1 ~ "White",
PRACE_W1 == 2 ~ "Black",
PRACE_W1 == 3 ~ "Black",
PRACE_W1 == 4 ~ "Latinx",
PRACE_W1 == 5 ~ "Asian",
PRACE_W1 == 6 ~ "Asian",
PRACE_W1 == 7 ~ "Other",
PRACE_W1 == 8 ~ "Native",
PRACE_W1 == 9 ~ "Native",
PRACE_W1 == 10 ~ "Other",
PRACE_W1 == 11 ~ "Other",
)) %>%
mutate(ETHRACE_W1 = case_when (
ETHRACE_W1 == 1 ~ "White",
ETHRACE_W1 == 2 ~ "White",
ETHRACE_W1 == 3 ~ "White",
ETHRACE_W1 == 4 ~ "Black",
ETHRACE_W1 == 5 ~ "Black",
ETHRACE_W1 == 6 ~ "Latinx",
ETHRACE_W1 == 7 ~ "Latinx",
ETHRACE_W1 == 8 ~ "Other",
ETHRACE_W1 == 9 ~ "Other",
ETHRACE_W1 == 10 ~ "Other",
ETHRACE_W1 == 11 ~ "Other",
ETHRACE_W1 == 12 ~ "Other",
ETHRACE_W1 == 14 ~ "Other",
ETHRACE_W1 == 15 ~ "Other",
)) %>%
mutate(RELTRAD_W1 = case_when(
RELTRAD_W1 == 1 ~ "ConProt",
RELTRAD_W1 == 2 ~ "MainProt",
RELTRAD_W1 == 3 ~ "BlackProt",
RELTRAD_W1 == 4 ~ "Catholic",
RELTRAD_W1 == 5 ~ "Jewish",
RELTRAD_W1 == 6 ~ "Other",
RELTRAD_W1 == 7 ~ "None",
RELTRAD_W1 == 8 ~ "Other",
RELTRAD_W1 == 9 ~ "INDE",
))
# Create education vars
# Education at W4
df <- df %>%
mutate(EDATT_W4 = case_when(
EDATT_W4 == 1 ~ "0",
EDATT_W4 == 2 ~ "1",
EDATT_W4 == 3 ~ "2",
EDATT_W4 == 4 ~ "3",
EDATT_W4 == 5 ~ "3"
))
# Participant's education
df$College <- ifelse(df$EDATT_W4 == "3", 1, 0) # Highest education == some college
df$HighSchool <- ifelse(df$EDATT_W4 == "2", 1, 0) # Highest education == high school
# Parental education at W1
df <- df %>%
mutate(PEDUC1_W1 = case_when(
PEDUC1_W1 == 1 ~ "0", # < HS
PEDUC1_W1 == 2 ~ "1", # HS
PEDUC1_W1 == 3 ~ "2", # > HS
PEDUC1_W1 == 777 ~ NA,
PEDUC1_W1 == 888 ~ NA,
PEDUC1_W1 == 999 ~ NA
)) %>%
mutate(PSPEDUC1_W1 = case_when(
PSPEDUC1_W1 == 1 ~ "0", # < HS
PSPEDUC1_W1 == 2 ~ "1", # HS
PSPEDUC1_W1 == 3 ~ "2", # > HS
PSPEDUC1_W1 == 777 ~ NA,
PSPEDUC1_W1 == 888 ~ NA,
PSPEDUC1_W1 == 999 ~ NA
))
# Treat DiS, BA, MA, PhD and prof degree as college, others as HS
df$FirstParEd <- ifelse(df$PEDUC1_W1 == "2" & df$PEDUC3_W1 %in% c(5, 6, 8, 10, 11), "3", df$PEDUC1_W1)
df$SecondParEd <- ifelse(df$PSPEDUC1_W1 == "2" & df$PSPEDUC3_W1 %in% c(5, 6, 8, 10, 11), "3", df$PSPEDUC1_W1)
df$ParEd <- paste0(df$FirstParEd, df$SecondParEd)
df <- df %>%
mutate(ParEd_ord = case_when(
ParEd == "33" ~ 5,
ParEd %in% c("03", "13", "23", "30", "31", "32", "3NA") ~ 4,
ParEd == "22" ~ 3,
ParEd %in% c("02", "12", "20", "21", "2NA") ~ 2,
.default = 1
))
df$ParCollege <- ifelse(df$ParEd_ord %in% c(4, 5), 1, 0)
df$ParHighSchool <- ifelse(df$ParEd_ord %in% c(2, 3), 1, 0)
# Creating dummy variables
df[, c("I_GENDER_W1", "PRACE_W1", "ETHRACE_W1", "RELTRAD_W1")] <- lapply(
df[, c("I_GENDER_W1", "PRACE_W1", "ETHRACE_W1", "RELTRAD_W1")], factor
)
dummies <- fastDummies::dummy_cols(df[,
c("I_GENDER_W1", "PRACE_W1", "ETHRACE_W1", "RELTRAD_W1")],
remove_most_frequent_dummy = T, ignore_na = T,
remove_selected_columns = T)
names(dummies) <- c("Male", "AsianPR", "BlackPR", "LatinxPR", "NativePR", "OtherPR",
"BlackE", "LatinxE", "OtherE",
"BlackProt", "Catholic", "INDE", "Jewish","MainProt", "None", "OtherRel")
dummies_cors <- round(cor(dummies, use = "pairwise"),2)
psych::describe(dummies)
df <- cbind(df, dummies)
table(df$RELTRAD_W1)
# Deleting non-Christian participants
df <- df[!(df$RELTRAD_W1 %in% c("Jewish", "Other")),]
# Deleting unaffiliates with no Christian parent
df <- df[!(df$RELTRAD_W1 == "INDE" & df$BNPRLCAT_W1 == 0 & df$BNPRLPRT_W1 == 0),]
# Remove W1 non-believers
df <- df[df$GOD_W1 != "0",]
# Renaming vars to match preregistration
names(df) <- c("id", "Gender", "PRACE", "ETHRACE", "Age", "MS1", "BiG1",
"PEDUC1", "PSPEDUC", "PEDUC3", "ParRit", "PST", "RELTRAD", "PSPEDUC3", "ParCatholic", "ParProtestant","BiG2",
"H2", "CR2_1", "CR2_2", "PR2", "T2", "BiG3", "H3", "CR3_1", "CR3_2",
"PR3", "Inc3", "BiG4", "H4", "CR4_1", "CR4_2", "PR4", "Inc4", "EDATT_W4", names(df)[36:ncol(df)])
df$CR2 <- ifelse(df$CR2_1 == 0, 0,  df$CR2_2)
df$CR3 <- ifelse(df$CR3_1 == 0, 0,  df$CR3_2)
df$CR4 <- ifelse(df$CR4_1 == 0, 0,  df$CR4_2)
df$MS1 <- as.numeric(df$MS1)
df$ParRit <- ifelse(df$ParRit == 777, NA, df$ParRit)
df$BiG1 <- factor(df$BiG1, levels = c("0", ".5", "1"))
df$BiG2 <- factor(df$BiG2, levels = c("0", ".5", "1"))
df$BiG3 <- factor(df$BiG3, levels = c("0", ".5", "1"))
df$BiG4 <- factor(df$BiG4, levels = c("0", ".5", "1"))
df$T2 <- factor(df$T2)
df$H2 <- factor(df$H2)
df$H3 <- factor(df$H3 )
df$H4 <- factor(df$H4 )
df$PR2 <- factor(df$PR2)
df$PR3 <- factor(df$PR3)
df$PR4 <- 8-df$PR4 # Revert PR at T4
df$PR4 <- factor(df$PR4)
df$CR2 <- factor(df$CR2)
df$CR3 <- factor(df$CR3)
df$CR4 <- factor(df$CR4)
df$ParRit <- factor(df$ParRit )
df$PST <- factor(df$PST )
df$Age <- as.vector(scale(ifelse(df$Age == 888, NA, df$Age)))
df$Inc3 <-  as.vector(scale(df$Inc3))
str(df)
# Descriptives ------------------------------------------------------------
Amelia::missmap(df, rank.order = F)
na_sum <- data.frame(lapply(df, function(x) sum(is.na(x))))
na_sum[2,] <- round(na_sum[1,]/nrow(df)*100,2)
na_sum <- t(na_sum) # % missing per var
# missing in BiG
Amelia::missmap(df[,c("BiG1", "BiG2", "BiG3", "BiG4")], rank.order = F)
df$god_na_sum <- rowSums(is.na(df[,c("BiG1", "BiG2", "BiG3", "BiG4")]))
table(df$god_na_sum)
psych::describe(df[,c("BiG1", "BiG2", "BiG3", "BiG4")])
df$focal_na <- rowSums(is.na(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")]))
sum(df$focal_na > 0)
Amelia::missmap(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")], rank.order = F)
psych::describe(df[,c("BiG1", "BiG2", "BiG3", "BiG4",
"MS1", "H2", "T2", "PR3", "CR3")])
table(df$focal_na)
# Plots -------------------------------------------------------------------
library(ggalluvial)
long_df <- df %>%
pivot_longer(cols = starts_with("BiG"), names_to = "TimePoint", values_to = "Belief") %>%
mutate(TimePoint = as.integer(gsub("BiG", "", TimePoint)),
Belief = ifelse(is.na(Belief), "NA", as.character(Belief)),
Belief = factor(Belief, ordered = TRUE, levels = c("NA", "0", ".5", "1")))
# Plot the data using stacked bar plot
ggplot(long_df, aes(x = TimePoint, fill = Belief)) +
geom_bar(position = "stack", width = 0.7) +
labs(title = "Changes in Belief in God over Time",
x = "Time Point",
y = "Count",
fill = "Belief") +
theme_minimal()
# Imputation --------------------------------------------------------------
# Number of imputed df
N.Imp <-  50
# Create a column that contain the appropreate model for each variable - this only works if the variable is of the correct data type in the first place
names(df)
type <- c("", "", "", "", "","pmm", "polr",
"", "", "", "polr", "polr", "", "",
"", "", "polr", "polr", "", "", "polr",
"polr", "polr", "polr", "", "", "polr", "pmm",
"polr", "polr", "", "", "polr", "pmm", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "polr", "polr", "polr", "",
"")
df_imp <- mice::mice(df, m = N.Imp, method = type)
# Exract each DF
mice.imp <- list()
for(i in 1:N.Imp) {
mice.imp[[i]] <- mice::complete(df_imp, action= i, inc=FALSE)
# remove spaces and other charecters on colnames
colnames( mice.imp[[i]]) <- gsub(" ", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("/", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("-", "_", colnames( mice.imp[[i]]), fixed = TRUE)
}
# Number of imputed df
N.Imp <-  3
# Create a column that contain the appropreate model for each variable - this only works if the variable is of the correct data type in the first place
names(df)
type <- c("", "", "", "", "","pmm", "polr",
"", "", "", "polr", "polr", "", "",
"", "", "polr", "polr", "", "", "polr",
"polr", "polr", "polr", "", "", "polr", "pmm",
"polr", "polr", "", "", "polr", "pmm", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "", "", "", "",
"", "", "", "polr", "polr", "polr", "",
"")
df_imp <- mice::mice(df, m = N.Imp, method = type)
# Exract each DF
mice.imp <- list()
for(i in 1:N.Imp) {
mice.imp[[i]] <- mice::complete(df_imp, action= i, inc=FALSE)
# remove spaces and other charecters on colnames
colnames( mice.imp[[i]]) <- gsub(" ", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("/", "", colnames( mice.imp[[i]]), fixed = TRUE)
colnames( mice.imp[[i]]) <- gsub("-", "_", colnames( mice.imp[[i]]), fixed = TRUE)
}
base <- "
BiG2 ~ BiG1 + h1a*MS1
BiG3 ~ ar3*BiG2 + h1b*MS1
BiG4 ~ ar4*BiG3 + h1c*MS1
BiG2 ~*~ 1*BiG2
## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c
"
base_mi <- semTools::runMI(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
warnings()
base_mi
base_mi <- semTools::sem.mi(base, mice.imp, ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
detach("lavaan.mi")
detach(lavaan.mi)
detach("package:lavaan.mi", unload = TRUE)
base_mi <- semTools::sem.mi(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
base_mi <- semTools::runMI(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta")
lavaan.mi::standardizedSolution.mi(fit, return.vcov = TRUE, type = "def.std.all")
lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.std.all")
VCOV <- lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.std.all")
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4")
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(base_mi)[, 'label'] == param)
}
est <- lavaan.mi::standardizedSolution.mi(controls_mi)[indices, 'est.std'] # estimates
est <- lavaan.mi::standardizedSolution.mi(base_mi)[indices, 'est.std'] # estimates
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(base_mi)[, 'label'] == param)
}
indices <- data.frame()
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(base_mi)[, 'label'] == param)
}
indices <- rep(NA, length(hypothesis_elements))
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(controls_mi)[, 'label'] == param)
}
indices <- rep(NA, length(hypothesis_elements))
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(base_mi)[, 'label'] == param)
}
indices
est <- lavaan.mi::standardizedSolution.mi(base_mi)[indices, 'est.std'] # estimates
names(est) <- hypothesis_elements
VCOV <- lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.std.all")
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
hypothesis <-  "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0"
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
VCOV
VCOV <- lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.joint.std.all")
VCOV
base_mi <- semTools::runMI(base, mice.imp, fun = "sem", ordered = c("BiG1","BiG2", "BiG3", "BiG4"), meanstructure = T,
estimator = "WLSMV", missing = "pairwise", parameterization = "theta",
constraints = "## MS1 -> BiG2 -> BiG3
ms1_big3 := h1a*ar3
## MS1 -> BiG3 -> BiG4
ms1_big4 := h1b*ar4
h1a_ := h1a
h1b_ := h1b
h1c_ := h1c")
hypothesis_elements = c("h1a_", "h1b_", "h1c_", "ms1_big3", "ms1_big4")
indices <- rep(NA, length(hypothesis_elements))
for (i in seq_along(hypothesis_elements)) {
param <- hypothesis_elements[i]
indices[i] <- which(lavaan.mi::standardizedSolution.mi(base_mi)[, 'label'] == param)
}
est <- lavaan.mi::standardizedSolution.mi(base_mi)[indices, 'est.std'] # estimates
names(est) <- hypothesis_elements
VCOV <- lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.std.all")
VCOV
library(lavaan.mi)
est <- lavaan.mi::standardizedSolution.mi(base_mi)[indices, 'est.std'] # estimates
names(est) <- hypothesis_elements
VCOV <- lavaan.mi::standardizedSolution.mi(base_mi, return.vcov = TRUE, type = "def.std.all")
hypothesis <-  "h1a_ + h1b_ + h1c_ + ms1_big3 + ms1_big4 < 0"
restriktor::goric(est, VCOV = VCOV,
hypotheses = list(hypothesis), comparison = "complement")
VCOV
library(lavaan.mi)
est <- lavaan.mi::standardizedSolution.mi(base_mi)[indices, 'est.std'] # estimates
est
names(est) <- hypothesis_elements
est
library(lavaan.mi)
data(HS20imps) # import a list of 20 imputed data sets
## specify CFA model from lavaan's ?cfa help page
HS.model <- '
visual  =~ x1 + a*x2 + x3
textual =~ x4 + b*x5 + x6
speed   =~ x7 + c*x8 + x9
'
## fit model to 20 imputed data sets
fit <- cfa.mi(HS.model, data = HS20imps, constraints = 'abc := a*b*c')
standardizedSolution.mi(fit, return.vcov = TRUE, type = "def.std.all")
standardizedSolution.mi(fit, return.vcov = TRUE, type = "def.joint.std.all")
x <- standardizedSolution.mi(fit, return.vcov = TRUE, type = "def.std.all")
View(x)
library(lavaan.mi)
library(restriktor)
